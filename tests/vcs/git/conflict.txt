# A file with merge conflict markers
print 'Line 1 does something'
print 'No issues till here'
<<<<<<< HEAD: mergetest
print 'This is my third line'
print 'Original fourth line unchanged'
=========
print 'This is a fourth line I am adding'
>>>>>>> 4e2b407f501b68f8588aa645acafffa0224b9b78: mergetest

<<<<<<< HEAD: mergetest
print 'Fifth line that could be removed in the next commit'
=========
>>>>>>> 4e2b407f501b68f8588aa645acafffa0224b9b78: mergetest
print 'Let me know how this looks'

# A file with merge conflict markers
print 'Line 1 does something'
print 'No issues till here'
<<<<<<< HEAD: mergetest
print 'This is my third line'
print 'Original fourth line unchanged'
=========
print 'This is a fourth line I am adding'
>>>>>>> 4e2b407f501b68f8588aa645acafffa0224b9b78: mergetest

<<<<<<< HEAD: mergetest
print 'Fifth line that could be removed in the next commit'
=========
>>>>>>> 4e2b407f501b68f8588aa645acafffa0224b9b78: mergetest
print 'Let me know how this looks'

from coalib.bears.LocalBear import LocalBear
from coalib.results.Result import Result
from coalib.results.Diff import Diff
from coalib.results.SourceRange import SourceRange


class GitConflictMarkerBear(LocalBear):
    def run(self, filename, file):
        marker_free_code = []

        merge_conflict_starts = [line_number for line_number, line in
                                 enumerate(file) if
                                 line.startswith('<<<<<<< ')]

        merge_conflict_split = [line_number for line_number, line in
                                enumerate(file) if
                                line.startswith('=========')]

        merge_conflict_ends = [line_number for line_number, line in
                               enumerate(file) if
                               line.startswith('>>>>>>> ')]

        for line_number, line in enumerate(file):
            if (line_number not in merge_conflict_starts and
                line_number not in merge_conflict_split and
                    line_number not in merge_conflict_ends):
                marker_free_code.append(line)

        diffs = Diff.from_string_arrays(file, marker_free_code).split_diff()

        for diff in diffs:
            yield Result(self,
                         'Possible merge conflict marker found on these lines',
                         affected_code=(diff.range(filename),), 
                         diffs={filename: diff})

